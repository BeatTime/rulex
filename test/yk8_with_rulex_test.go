package test

import (
	"os"
	"os/signal"
	"syscall"
	"testing"

	"github.com/i4de/rulex/core"
	"github.com/i4de/rulex/engine"
	"github.com/i4de/rulex/glogger"
	"github.com/i4de/rulex/typex"
)

//
// 下行请求 ----------------------------------------------------------------------------------------
// -- 应用调用设备行为 Topic: $thing/down/action/{ProductID}/{DeviceName}
// -- 设备响应行为执行结果 Topic: $thing/up/action/{ProductID}/{DeviceName}
// -------------------------------------------------------------------------------------------------
// {
//     "method":"action",
//     "clientToken":"111111111111111111",
//     "actionId":"control",
//     "timestamp":1657105901,
//     "params":{
//         "sw1":0,
//         "sw2":0,
//         "sw3":0,
//         "sw4":0,
//         "sw5":0,
//         "sw6":0,
//         "sw7":0,
//         "sw8":0
//     }
// }
// 下行请求设备的回复 ------------------------------------------------------------------------------
// {
//     "method": "action_reply",
//     "clientToken": "111111111111111111",
//     "code": 0,
//     "status": "OK",
//     "response": {
//         // 定义的结构体
//      }
// }
// 下行控制 ----------------------------------------------------------------------------------------
// -- 下发 Topic: $thing/down/property/{ProductID}/{DeviceName}
// -- 响应 Topic: $thing/up/property/{ProductID}/{DeviceName}
// -------------------------------------------------------------------------------------------------
// {
//     "method":"control",
//     "clientToken":"clientToken-447ec5b5-a978-477f-aaa7-99a1c78e342a",
//     "params":{
//         "switchers":{
//             "sw7":0,
//             "sw8":0,
//             "sw1":0,
//             "sw2":0,
//             "sw3":0,
//             "sw4":0,
//             "sw5":0,
//             "sw6":0
//         }
//     }
// }
// 事件上报 ----------------------------------------------------------------------------------------
// -- 设备事件上行请求 Topic： $thing/up/event/{ProductID}/{DeviceName}
// -- 设备事件上行响应 Topic： $thing/down/event/{ProductID}/{DeviceName}
// -------------------------------------------------------------------------------------------------
// {
//    "method":"event_post",
//    "clientToken":"123",
//    "version":"1.0",
//    "eventId":"PowerAlarm",
//    "type":"fault",
//    "timestamp":11111111,
//    "params":{
//        "Voltage":2.8,
//        "Percent":20
//    }
// }
//
type AutoGenerated struct {
	Method      string              `json:"method"`
	ClientToken string              `json:"clientToken"`
	Params      TencentDownProperty `json:"params"`
}
type TencentDownProperty struct {
	Switchers Switchers `json:"switchers"`
}
type Switchers struct {
	Sw7 int `json:"sw7"`
	Sw8 int `json:"sw8"`
	Sw1 int `json:"sw1"`
	Sw2 int `json:"sw2"`
	Sw3 int `json:"sw3"`
	Sw4 int `json:"sw4"`
	Sw5 int `json:"sw5"`
	Sw6 int `json:"sw6"`
}

/*
*
* 测试RULEX加载Yk8
*
 */
func Test_RULEX_WITH_YK08(t *testing.T) {
	mainConfig := core.InitGlobalConfig("conf/rulex.ini")
	glogger.StartGLogger(true, core.GlobalConfig.LogPath)
	glogger.StartLuaLogger(core.GlobalConfig.LuaLogPath)
	core.StartStore(core.GlobalConfig.MaxQueueSize)
	core.SetLogLevel()
	core.SetPerformance()
	c := make(chan os.Signal, 1)
	signal.Notify(c, syscall.SIGINT, syscall.SIGABRT, syscall.SIGTERM)
	engine := engine.NewRuleEngine(mainConfig)
	engine.Start()
	//
	// 腾讯云MQTT
	//
	TENCENT_IOT_INEND := typex.NewInEnd(
		typex.TENCENT_IOT_HUB,
		"TENCENT_IOT_HUB",
		"TENCENT_IOT_HUB", map[string]interface{}{
			"Host":       "127.0.0.1",
			"Port":       1883,
			"productId":  "TENCENT_IOT_HUB",
			"deviceName": "TENCENT_IOT_HUB",
			"ClientId":   "TENCENT_IOT_HUB",
			"Username":   "TENCENT_IOT_HUB",
			"Password":   "TENCENT_IOT_HUB",
		},
	)
	TENCENT_IOT_INEND.UUID = "TENCENT_IOT_INEND"
	if err := engine.LoadInEnd(TENCENT_IOT_INEND); err != nil {
		t.Error("TENCENT_IOT_INEND load failed:", err)
	}
	rule1 := typex.NewRule(engine,
		"uuid",
		"FROM TENCENT_IOT_INEND",
		"FROM TENCENT_IOT_INEND",
		[]string{TENCENT_IOT_INEND.UUID},
		[]string{},
		`function Success()end`,
		`
	Actions = {
		function(data)
		    rulexlib:log('TENCENT_IOT_INEND: ', data)
			return true, data
		end
	}`, `function Failed(error) print("[TENCENT_IOT_INEND Failed Callback]", error) end`)
	if err := engine.LoadRule(rule1); err != nil {
		t.Error(err)
	}

	s := <-c
	glogger.GLogger.Warn("Received stop signal:", s)
	engine.Stop()
	os.Exit(0)
}

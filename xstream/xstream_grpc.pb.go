// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package xstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XStreamClient is the client API for XStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XStreamClient interface {
	// 收到来自其他端点的请求
	OnApproached(ctx context.Context, opts ...grpc.CallOption) (XStream_OnApproachedClient, error)
	// 给其他端点发送请求
	SendStream(ctx context.Context, opts ...grpc.CallOption) (XStream_SendStreamClient, error)
}

type xStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewXStreamClient(cc grpc.ClientConnInterface) XStreamClient {
	return &xStreamClient{cc}
}

func (c *xStreamClient) OnApproached(ctx context.Context, opts ...grpc.CallOption) (XStream_OnApproachedClient, error) {
	stream, err := c.cc.NewStream(ctx, &XStream_ServiceDesc.Streams[0], "/xstream.XStream/OnApproached", opts...)
	if err != nil {
		return nil, err
	}
	x := &xStreamOnApproachedClient{stream}
	return x, nil
}

type XStream_OnApproachedClient interface {
	Send(*Data) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type xStreamOnApproachedClient struct {
	grpc.ClientStream
}

func (x *xStreamOnApproachedClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *xStreamOnApproachedClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *xStreamClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (XStream_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &XStream_ServiceDesc.Streams[1], "/xstream.XStream/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &xStreamSendStreamClient{stream}
	return x, nil
}

type XStream_SendStreamClient interface {
	Send(*Data) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type xStreamSendStreamClient struct {
	grpc.ClientStream
}

func (x *xStreamSendStreamClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *xStreamSendStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XStreamServer is the server API for XStream service.
// All implementations must embed UnimplementedXStreamServer
// for forward compatibility
type XStreamServer interface {
	// 收到来自其他端点的请求
	OnApproached(XStream_OnApproachedServer) error
	// 给其他端点发送请求
	SendStream(XStream_SendStreamServer) error
	mustEmbedUnimplementedXStreamServer()
}

// UnimplementedXStreamServer must be embedded to have forward compatible implementations.
type UnimplementedXStreamServer struct {
}

func (UnimplementedXStreamServer) OnApproached(XStream_OnApproachedServer) error {
	return status.Errorf(codes.Unimplemented, "method OnApproached not implemented")
}
func (UnimplementedXStreamServer) SendStream(XStream_SendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStream not implemented")
}
func (UnimplementedXStreamServer) mustEmbedUnimplementedXStreamServer() {}

// UnsafeXStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XStreamServer will
// result in compilation errors.
type UnsafeXStreamServer interface {
	mustEmbedUnimplementedXStreamServer()
}

func RegisterXStreamServer(s grpc.ServiceRegistrar, srv XStreamServer) {
	s.RegisterService(&XStream_ServiceDesc, srv)
}

func _XStream_OnApproached_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(XStreamServer).OnApproached(&xStreamOnApproachedServer{stream})
}

type XStream_OnApproachedServer interface {
	SendAndClose(*Response) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type xStreamOnApproachedServer struct {
	grpc.ServerStream
}

func (x *xStreamOnApproachedServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *xStreamOnApproachedServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _XStream_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(XStreamServer).SendStream(&xStreamSendStreamServer{stream})
}

type XStream_SendStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type xStreamSendStreamServer struct {
	grpc.ServerStream
}

func (x *xStreamSendStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *xStreamSendStreamServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XStream_ServiceDesc is the grpc.ServiceDesc for XStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xstream.XStream",
	HandlerType: (*XStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnApproached",
			Handler:       _XStream_OnApproached_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendStream",
			Handler:       _XStream_SendStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "xstream.proto",
}

// HttpHelloWorldServiceClient is the client API for HttpHelloWorldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpHelloWorldServiceClient interface {
	HelloWorld(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
}

type httpHelloWorldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpHelloWorldServiceClient(cc grpc.ClientConnInterface) HttpHelloWorldServiceClient {
	return &httpHelloWorldServiceClient{cc}
}

func (c *httpHelloWorldServiceClient) HelloWorld(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/xstream.HttpHelloWorldService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpHelloWorldServiceServer is the server API for HttpHelloWorldService service.
// All implementations must embed UnimplementedHttpHelloWorldServiceServer
// for forward compatibility
type HttpHelloWorldServiceServer interface {
	HelloWorld(context.Context, *StringMessage) (*StringMessage, error)
	mustEmbedUnimplementedHttpHelloWorldServiceServer()
}

// UnimplementedHttpHelloWorldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHttpHelloWorldServiceServer struct {
}

func (UnimplementedHttpHelloWorldServiceServer) HelloWorld(context.Context, *StringMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedHttpHelloWorldServiceServer) mustEmbedUnimplementedHttpHelloWorldServiceServer() {}

// UnsafeHttpHelloWorldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpHelloWorldServiceServer will
// result in compilation errors.
type UnsafeHttpHelloWorldServiceServer interface {
	mustEmbedUnimplementedHttpHelloWorldServiceServer()
}

func RegisterHttpHelloWorldServiceServer(s grpc.ServiceRegistrar, srv HttpHelloWorldServiceServer) {
	s.RegisterService(&HttpHelloWorldService_ServiceDesc, srv)
}

func _HttpHelloWorldService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpHelloWorldServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xstream.HttpHelloWorldService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpHelloWorldServiceServer).HelloWorld(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpHelloWorldService_ServiceDesc is the grpc.ServiceDesc for HttpHelloWorldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpHelloWorldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xstream.HttpHelloWorldService",
	HandlerType: (*HttpHelloWorldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _HttpHelloWorldService_HelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xstream.proto",
}
